// src/components/PredictForm.js
import React, { useState } from 'react';


const PredictForm = ({ onSubmit, prediction, isLoading, severityColor }) => {
  const [formData, setFormData] = useState({
    BQ: 0,
    ESS: 5,
    BMI: 19,
    Weight: 50,
    Height: 160,
    Head: 45,
    Neck: 40,
    Waist: 90,
    Buttock: 85,
    Age: 25,
    Gender: 0,
  });
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({ ...prevData, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };
  
  const result = prediction;
  const severity = prediction ? result.split(":")[1].trim() : ''; 

  const getSeverityMessage = (severity) => {
    
    switch (severity) {
      case 'NORMAL':
        return "You're doing great! No signs of Obstructive Sleep Apnea detected.";
      case 'MILD':
        return "Mild signs detected. Keep an eye on your sleep habits and consult a specialist if needed.";
      case 'MODERATE':
        return "Moderate risk detected. We recommend seeking medical advice soon.";
      case 'SEVERE':
        return "High risk of Obstructive Sleep Apnea. Please consult a healthcare professional immediately.";
      case 'Unable to get prediction':
        return "Contact the developer";
      default:
        return "Classifications are generated by a machine learning model and should not be considered a formal medical diagnosis. Please consult a healthcare professional for clinical evaluation.";
    }
  };
  const renderHeading = () => {
    if (!prediction) {
      return "Apnea-lyze Pro AHI Classifier";
    }
  
    if (prediction === "Error: Unable to get prediction") {
      return "Please start the server";
    }
  
    if (severity) {
      return `You may have a ${severity} Obstructive Sleep Apnea`;
    }
  
    return "Apnea-lyze Pro AHI Classifier";  // Fallback
  };
  

  return (
    
    // <form onSubmit={handleSubmit}>
    //   <label>BQ</label>
    //   <input type="number" name="BQ" value={formData.BQ} onChange={handleChange} />

    //   <label>ESS</label>
    //   <input type="number" name="ESS" value={formData.ESS} onChange={handleChange} />

    //   <label>BMI</label>
    //   <input type="number" name="BMI" value={formData.BMI} onChange={handleChange} />

    //   <label>Weight</label>
    //   <input type="number" name="Weight" value={formData.Weight} onChange={handleChange} />

    //   <label>Height</label>
    //   <input type="number" name="Height" value={formData.Height} onChange={handleChange} />

    //   <label>Head</label>
    //   <input type="number" name="Head" value={formData.Head} onChange={handleChange} />

    //   <label>Neck</label>
    //   <input type="number" name="Neck" value={formData.Neck} onChange={handleChange} />

    //   <label>Waist</label>
    //   <input type="number" name="Waist" value={formData.Waist} onChange={handleChange} />

    //   <label>Buttock</label>
    //   <input type="number" name="Buttock" value={formData.Buttock} onChange={handleChange} />

    //   <label>Age</label>
    //   <input type="number" name="Age" value={formData.Age} onChange={handleChange} />

    //   <label>Gender</label>
    //   <input type="number" name="Gender" value={formData.Gender} onChange={handleChange} />

    //   <button type="submit">Submit</button>
    // </form>

    
    <>
      <form onSubmit={handleSubmit}>
        <section className="">
          <div className="container">
            <div className="card border-light-subtle shadow-sm">
              <div className="row g-0">
                
                {/* LEFT SIDE PANEL WITH TRANSITION COLOR */}
                <div
                  className="col-12 col-md-6"
                  style={{
                    backgroundColor: severityColor || '#343a40',
                    transition: 'background-color 0.6s ease',
                    color: '#fff',
                  }}
                >
                  <div className="d-flex align-items-center justify-content-center h-100">
                    <div className="col-10 col-xl-8 py-3 text-center">
                      
                      
                      <h2 className="h1 mb-4">
                      {renderHeading()}
                      </h2>
                      <p className="lead m-0">
                        {getSeverityMessage(severity)}
                      </p>
                  </div>
                </div>
              </div>
              <div class="col-12 col-md-6">
                <div class="card-body p-3 p-md-4 p-xl-5">
                  <div class="row">
                    <div class="col-12">
                      
                    </div>
                  </div>
                  
                    <div class="row gy-3 gy-md-4 overflow-hidden">
                      <div class="col-12">
                        <label for="firstName" class="form-label">BQ (0 or 1)</label>
                        <input type="number" class="form-control" name="BQ" value={formData.BQ} placeholder="First Name" onChange={handleChange} required />
                      </div>
                      <div class="col-12">
                        <label for="firstName" class="form-label">ESS (0 to 25)</label>
                        <input type="number" class="form-control" name="ESS" value={formData.ESS} placeholder="First Name" onChange={handleChange} required/>
                      </div>
                      <div class="col-12">
                        <label for="firstName" class="form-label">BMI </label>
                        <input type="number" class="form-control" name="BMI" value={formData.BMI} placeholder="First Name" onChange={handleChange} required/>
                      </div>
                      <div class="col-12">
                        <label for="firstName" class="form-label">Weight (kg)</label>
                        <input type="number" class="form-control" name="Weight" value={formData.Weight} placeholder="First Name" onChange={handleChange} required/>
                      </div>
                      <div class="col-12">
                        <label for="firstName" class="form-label">Height (cm)</label>
                        <input type="number" class="form-control" name="Height" value={formData.Height} placeholder="First Name" onChange={handleChange} required/>
                      </div>
                      <div class="col-12">
                        <label for="firstName" class="form-label">Head (cm)</label>
                        <input type="number" class="form-control" name="Head" value={formData.Head} placeholder="First Name" onChange={handleChange} required/>
                      </div>
                      <div class="col-12">
                        <label for="lastName" class="form-label">Neck (cm)</label>
                        <input type="number" class="form-control" name="Neck" value={formData.Neck} placeholder="Last Name" onChange={handleChange} required />
                      </div>
                      <div class="col-12">
                        <label for="email" class="form-label">Waist (cm)</label>
                        <input type="number" class="form-control" name="Waist" value={formData.Waist} placeholder="name@example.com" onChange={handleChange} required/>
                      </div>
                      <div class="col-12">
                        <label for="password" class="form-label">Buttock (cm)</label>
                        <input type="number" class="form-control" name="Buttock" value={formData.Buttock} onChange={handleChange} required/>
                      </div>
                      <div class="col-12">
                        <label for="password" class="form-label">Age </label>
                        <input type="number" class="form-control" name="Age"  value={formData.Age} onChange={handleChange} required/>
                      </div>
                      <div class="col-12">
                        <label for="password" class="form-label">Gender (Female: 0; Male: 1)</label>
                        <input type="number" class="form-control" name="Gender" value={formData.Gender} onChange={handleChange} required/>
                      </div>
                      
                      <div class="col-12">
                        <div class="d-grid">
                        <button className="btn bsb-btn-xl btn-dark" type="submit" disabled={isLoading}>
                            {isLoading ? 'Predicting...' : 'Classify'}
                          </button>
                        </div>
                      </div>
                    </div>
                  
                  
                  
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      </form>
    </>
    
  );
};

export default PredictForm;